{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": ["token_info"],
  "properties": {
    "active_threshold": {
      "description": "The number or percentage of tokens that must be staked for the DAO to be active",
      "anyOf": [
        {
          "$ref": "#/definitions/ActiveThreshold"
        },
        {
          "type": "null"
        }
      ]
    },
    "token_info": {
      "description": "New or existing native token to use for voting power.",
      "allOf": [
        {
          "$ref": "#/definitions/TokenInfo"
        }
      ]
    },
    "unstaking_duration": {
      "description": "How long until the tokens become liquid again",
      "anyOf": [
        {
          "$ref": "#/definitions/Duration"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "ActiveThreshold": {
      "description": "The threshold of tokens that must be staked in order for this voting module to be active. If this is not reached, this module will response to `is_active` queries with false and proposal modules which respect active thresholds will not allow the creation of proposals.",
      "oneOf": [
        {
          "description": "The absolute number of tokens that must be staked for the module to be active.",
          "type": "object",
          "required": ["absolute_count"],
          "properties": {
            "absolute_count": {
              "type": "object",
              "required": ["count"],
              "properties": {
                "count": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The percentage of tokens that must be staked for the module to be active. Computed as `staked / total_supply`.",
          "type": "object",
          "required": ["percentage"],
          "properties": {
            "percentage": {
              "type": "object",
              "required": ["percent"],
              "properties": {
                "percent": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DenomUnit": {
      "description": "DenomUnit represents a struct that describes a given denomination unit of the basic token.",
      "type": "object",
      "required": ["aliases", "denom", "exponent"],
      "properties": {
        "aliases": {
          "description": "aliases is a list of string aliases for the given denom",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "denom": {
          "description": "denom represents the string name of the given denom unit (e.g uatom).",
          "type": "string"
        },
        "exponent": {
          "description": "exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 1^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).",
          "type": "string"
        }
      }
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": ["height"],
          "properties": {
            "height": {
              "type": "integer",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": ["time"],
          "properties": {
            "time": {
              "type": "integer",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "InitialBalance": {
      "type": "object",
      "required": ["address", "amount"],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "NewDenomMetadata": {
      "type": "object",
      "required": ["description", "display", "name", "symbol"],
      "properties": {
        "additional_denom_units": {
          "description": "Used define additional units of the token (e.g. \"tiger\") These must have an exponent larger than 0.",
          "type": ["array", "null"],
          "items": {
            "$ref": "#/definitions/DenomUnit"
          }
        },
        "description": {
          "description": "The description of the token",
          "type": "string"
        },
        "display": {
          "description": "The unit commonly used in communication (e.g. \"cat\")",
          "type": "string"
        },
        "name": {
          "description": "The name of the token (e.g. \"Cat Coin\")",
          "type": "string"
        },
        "symbol": {
          "description": "The ticker symbol of the token (e.g. \"CAT\")",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "NewTokenInfo": {
      "type": "object",
      "required": ["initial_balances", "subdenom", "token_issuer_code_id"],
      "properties": {
        "initial_balances": {
          "description": "The initial balances to set for the token, cannot be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InitialBalance"
          }
        },
        "initial_dao_balance": {
          "description": "Optional balance to mint for the DAO.",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "metadata": {
          "description": "Optional metadata for the token, this can additionally be set later.",
          "anyOf": [
            {
              "$ref": "#/definitions/NewDenomMetadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "subdenom": {
          "description": "The subdenom of the token to create, will also be used as an alias for the denom. The Token Factory denom will have the format of factory/{contract_address}/{subdenom}",
          "type": "string"
        },
        "token_issuer_code_id": {
          "description": "The code id of the cw-tokenfactory-issuer contract",
          "type": "integer",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "TokenInfo": {
      "oneOf": [
        {
          "description": "Uses an existing Token Factory token and creates a new issuer contract. Full setup, such as transferring ownership or setting up MsgSetBeforeSendHook, must be done manually.",
          "type": "object",
          "required": ["existing"],
          "properties": {
            "existing": {
              "type": "object",
              "required": ["denom"],
              "properties": {
                "denom": {
                  "description": "Token factory denom",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Creates a new Token Factory token via the issue contract with the DAO automatically setup as admin and owner.",
          "type": "object",
          "required": ["new"],
          "properties": {
            "new": {
              "$ref": "#/definitions/NewTokenInfo"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Uses a factory contract that must return the denom, optionally a Token Contract address. The binary must serialize to a `WasmMsg::Execute` message. Validation happens in the factory contract itself, so be sure to use a trusted factory contract.",
          "type": "object",
          "required": ["factory"],
          "properties": {
            "factory": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
